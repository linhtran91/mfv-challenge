// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/transaction.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/transaction.go -destination=mocks/services/transaction.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	models "mfv-challenge/internal/models"
	usecases "mfv-challenge/internal/usecases"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactionUsecase is a mock of TransactionUsecase interface.
type MockTransactionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUsecaseMockRecorder
}

// MockTransactionUsecaseMockRecorder is the mock recorder for MockTransactionUsecase.
type MockTransactionUsecaseMockRecorder struct {
	mock *MockTransactionUsecase
}

// NewMockTransactionUsecase creates a new mock instance.
func NewMockTransactionUsecase(ctrl *gomock.Controller) *MockTransactionUsecase {
	mock := &MockTransactionUsecase{ctrl: ctrl}
	mock.recorder = &MockTransactionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUsecase) EXPECT() *MockTransactionUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionUsecase) Create(ctx context.Context, userID int64, tran *models.Transaction) (*usecases.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, tran)
	ret0, _ := ret[0].(*usecases.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionUsecaseMockRecorder) Create(ctx, userID, tran any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionUsecase)(nil).Create), ctx, userID, tran)
}

// List mocks base method.
func (m *MockTransactionUsecase) List(ctx context.Context, userID, accountID int64, limit, offset int) ([]*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID, accountID, limit, offset)
	ret0, _ := ret[0].([]*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTransactionUsecaseMockRecorder) List(ctx, userID, accountID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransactionUsecase)(nil).List), ctx, userID, accountID, limit, offset)
}
