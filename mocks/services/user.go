// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/user.go -destination=mocks/services/user.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	models "mfv-challenge/internal/models"
	usecases "mfv-challenge/internal/usecases"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// GetDetail mocks base method.
func (m *MockUserUsecase) GetDetail(ctx context.Context, id int64) (*usecases.UserAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", ctx, id)
	ret0, _ := ret[0].(*usecases.UserAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockUserUsecaseMockRecorder) GetDetail(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockUserUsecase)(nil).GetDetail), ctx, id)
}

// ListAccount mocks base method.
func (m *MockUserUsecase) ListAccount(ctx context.Context, id int64) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccount", ctx, id)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccount indicates an expected call of ListAccount.
func (mr *MockUserUsecaseMockRecorder) ListAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccount", reflect.TypeOf((*MockUserUsecase)(nil).ListAccount), ctx, id)
}
