// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/account.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/account.go -destination=mocks/usecases/account.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	models "mfv-challenge/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccountRepository) Get(ctx context.Context, id int64) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountRepository)(nil).Get), ctx, id)
}

// GetByUserIDAndAccountID mocks base method.
func (m *MockAccountRepository) GetByUserIDAndAccountID(ctx context.Context, userID, accountID int64) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndAccountID", ctx, userID, accountID)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndAccountID indicates an expected call of GetByUserIDAndAccountID.
func (mr *MockAccountRepositoryMockRecorder) GetByUserIDAndAccountID(ctx, userID, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndAccountID", reflect.TypeOf((*MockAccountRepository)(nil).GetByUserIDAndAccountID), ctx, userID, accountID)
}
